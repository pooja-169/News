# -*- coding: utf-8 -*-
"""Hindi_sentimental.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N-_dz8Amlzo4FqA-aNufntlGQrT5Rbdi
"""

pip install transformers pandas torch

from transformers import MarianTokenizer, MarianMTModel
import pandas as pd

model_name = 'Helsinki-NLP/opus-mt-hi-en'
tokenizer = MarianTokenizer.from_pretrained(model_name)
model = MarianMTModel.from_pretrained(model_name)

input_file = "/content/drive/MyDrive/sentimental_analysis/webscrap_Hindi.csv"
df = pd.read_csv(input_file)

import torch
def translate_text(text, model, tokenizer):
    inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True)
    with torch.no_grad():
        translated = model.generate(**inputs)
    return tokenizer.decode(translated[0], skip_special_tokens=True)

df['Title_English'] = df['Title'].apply(lambda x: translate_text(x, model, tokenizer))

output_file = "/content/drive/MyDrive/sentimental_analysis/translated_news.csv"
df.to_csv(output_file, index=False)

import pandas as pd
import torch
from transformers import pipeline, AutoModelForSequenceClassification, AutoTokenizer
import torch.nn.functional as F

model_name = "cardiffnlp/twitter-roberta-base-sentiment-latest"
tokenizer = AutoTokenizer.from_pretrained(model_name)
sentiment_model = AutoModelForSequenceClassification.from_pretrained(model_name)

def analyze_sentiment(text):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True)
    outputs = sentiment_model(**inputs)
    probs = F.softmax(outputs.logits, dim=-1)

    pos_score = probs[0][2].item()  # Assuming index 2 is POSITIVE
    neu_score = probs[0][1].item()  # Assuming index 1 is NEUTRAL
    neg_score = probs[0][0].item()  # Assuming index 0 is NEGATIVE

    return pos_score, neu_score, neg_score

def calculate_intensity(pos_score, neu_score, neg_score):
    intensity = pos_score - neg_score  # Intensity between -1 and 1

    # Normalize intensity to be between -1 and 1
    if intensity > 0:
        intensity = min(intensity, 1)
    else:
        intensity = max(intensity, -1)

    return round(intensity, 2)

df = pd.read_csv('/content/drive/MyDrive/sentimental_analysis/translated_news.csv')
texts = df['Title_English'].astype(str).fillna('')

def analyze_text(text):
    pos_score, neu_score, neg_score = analyze_sentiment(text)
    intensity = calculate_intensity(pos_score, neu_score, neg_score)
    return pos_score, neu_score, neg_score, intensity

results = texts.apply(lambda x: pd.Series(analyze_text(x)))

df[['positive', 'neutral', 'negative', 'intensity']] = results

df.to_csv('/content/drive/MyDrive/sentimental_analysis/output_hindi.csv', index=False)
print("Sentiment and intensity analysis completed and results saved to 'output_with_sentiments_and_intensity.csv'")

file_path = '/content/drive/MyDrive/sentimental_analysis/output_hindi.csv'
df = pd.read_csv(file_path)

column_to_drop = 'Title_English'
df = df.drop(columns=[column_to_drop])


output_file_path = '/content/drive/MyDrive/sentimental_analysis/final_hindi.csv'
df.to_csv(output_file_path, index=False)

print(f"Column '{column_to_drop}' has been dropped and the new file is saved as '{output_file_path}'")

