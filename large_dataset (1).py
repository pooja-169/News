# -*- coding: utf-8 -*-
"""large_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UzutJmm8iMkRIkCampuVHsQpvOuxghbt
"""



import requests
import config
import numpy as np
import pandas as pd
from bs4 import BeautifulSoup
from openpyxl import load_workbook

response = requests.get('https://timesofindia.indiatimes.com/briefs')

soup=BeautifulSoup(response.content,'html.parser')

headlines= soup.find_all('a')
print(type(headlines))

existing_file = '/content/drive/MyDrive/sentimental_analysis/webscrap_1.xlsx'

wb = load_workbook(existing_file)
print(wb)

ws = wb.active

i=1
for headline in headlines:

    new_data = [[i,headline.text]]
    i=i+1
    for row in new_data:
        ws.append(row)
    wb.save(existing_file)

import pandas as pd

# Define the path to the Excel file and the output CSV file
xlsx_file = '/content/drive/MyDrive/sentimental_analysis/webscrap.xlsx'  # Replace with your Excel file path
csv_file = '/content/drive/MyDrive/sentimental_analysis/webscrap.csv'   # Replace with your desired CSV file path

# Read the Excel file
df = pd.read_excel(xlsx_file)

# Convert the DataFrame to a CSV file
df.to_csv(csv_file, index=False)

print(f"Conversion complete: '{xlsx_file}' has been converted to '{csv_file}'")

import pandas as pd
import torch
from transformers import pipeline, AutoModelForSequenceClassification, AutoTokenizer
import torch.nn.functional as F

model_name = "cardiffnlp/twitter-roberta-base-sentiment-latest"
tokenizer = AutoTokenizer.from_pretrained(model_name)
sentiment_model = AutoModelForSequenceClassification.from_pretrained(model_name)

def analyze_sentiment(text):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True)
    outputs = sentiment_model(**inputs)
    probs = F.softmax(outputs.logits, dim=-1)

    pos_score = probs[0][2].item()  # Assuming index 2 is POSITIVE
    neu_score = probs[0][1].item()  # Assuming index 1 is NEUTRAL
    neg_score = probs[0][0].item()  # Assuming index 0 is NEGATIVE

    return pos_score, neu_score, neg_score

def calculate_intensity(pos_score, neu_score, neg_score):
    intensity = pos_score - neg_score  # Intensity between -1 and 1

    # Normalize intensity to be between -1 and 1
    if intensity > 0:
        intensity = min(intensity, 1)
    else:
        intensity = max(intensity, -1)

    return round(intensity, 2)

df = pd.read_csv('/content/drive/MyDrive/sentimental_analysis/webscrap.csv')
texts = df['Description'].astype(str).fillna('')

def analyze_text(text):
    pos_score, neu_score, neg_score = analyze_sentiment(text)
    intensity = calculate_intensity(pos_score, neu_score, neg_score)
    return pos_score, neu_score, neg_score, intensity

results = texts.apply(lambda x: pd.Series(analyze_text(x)))

df[['positive', 'neutral', 'negative', 'intensity']] = results

df.to_csv('/content/drive/MyDrive/sentimental_analysis/output_1.csv', index=False)
print("Sentiment and intensity analysis completed and results saved to 'output_with_sentiments_and_intensity.csv'")

import pandas as pd
import numpy as np
from sklearn.cluster import DBSCAN
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler

df = pd.read_csv('/content/drive/MyDrive/sentimental_analysis/output.csv')

X = df[['positive','neutral','negative', 'intensity']].values

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Initialize DBSCAN
db = DBSCAN(eps=0.3, min_samples=5).fit(X_scaled)

# Get the cluster labels
labels = db.labels_

# Add the cluster labels to the DataFrame
df['cluster'] = labels

# Plot the clusters
plt.figure(figsize=(10, 6))
unique_labels = np.unique(labels)
colors = plt.cm.Spectral(np.linspace(0, 1, len(unique_labels)))

for label, color in zip(unique_labels, colors):
    class_member_mask = (labels == label)
    xy = X_scaled[class_member_mask]
    plt.plot(xy[:, 0], xy[:, 1], 'o', markerfacecolor=color, markeredgecolor='k', markersize=6)

plt.title('DBSCAN Clusters of Sentiment and Intensity')
plt.xlabel('Sentiment Score')
plt.ylabel('Intensity')
plt.show()

df.to_csv('/content/drive/MyDrive/sentimental_analysis/final_with_pattern.csv', index=False)
print("Pattern recognition completed and results saved to 'output_with_patterns.csv")

